@page "/user"
@inject IUserService UserService
@inject IChucVuService ChucVuService
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin")]

<MudDataGrid T="BLUser" Items="@listuser" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter"
    RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged" ReadOnly="@_readOnly"  Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="BLUser" />
        <Column T="BLUser" Field="Id" Title="STT" Filterable="false"/>
        <Column T="BLUser" Field="EmailAddress" Title="Email"/>
        <Column T="BLUser" Field="Role" Title="Quyền"/>
        <Column T="BLUser" CellClass="d-flex justify-end" Title="Action">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="@((e) => DeleteItem(context.Item.Id,Variant.Filled))" 
                Color="Color.Error" Variant="Variant.Filled"/>
            </CellTemplate>
        </Column>
    </Columns>
    
    <PagerContent>
        <MudDataGridPager T="BLUser" />
    </PagerContent>
    
</MudDataGrid>

@code {
    private List<BLUser> listuser = new List<BLUser>();
    private BLUser user = new BLUser();
    private string _searchString = string.Empty;
    private bool _sortNameByLength = true;
    private List<string> _events = new();
    private bool _readOnly = true;
    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            await UserService.GetUser();
            listuser = UserService.Listuser;
        }
        else
            navManager.NavigateTo("/");
    }
    #region
    // custom sort by name length
    private Func<BLUser, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.EmailAddress.Length;
        else
            return x.EmailAddress;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<BLUser, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.EmailAddress.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Role.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.EmailAddress} {x.Role} ".Contains(_searchString))
            return true;

        return false;
    };


    // events
    void RowClicked(DataGridRowClickEventArgs<BLUser> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<BLUser> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    #endregion

    async Task DeleteItem(int id,Variant variant)
    {
        Snackbar.Add($"Đã xóa thành công ", Severity.Success);
        await UserService.Delete(id);
        listuser = UserService.Listuser;

    }
}