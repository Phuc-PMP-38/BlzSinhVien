@inject IChucVuService ChucVuService
@inject ISnackbar Snackbar
@using MudBlazor.Services

<MudPaper Width="100%" Square="true" Class="mud-theme-primary">
@if(Id == 0)
{
    
    <h1 style="text-align:center">Create Chức Vụ</h1>
}
else
{
    <h1 style="text-align:center">Update Chức Vụ</h1>
}
<EditForm Model="@chucvu" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudPaper Width="100%">
        <MudItem xs="20" sm="15">
            <MudCard>
                <MudCardContent>
                    <MudSelect @bind-Value="enumValue" Label="Select User" HelperText="Enum" OpenIcon="@Icons.Material.Filled.VerifiedUser" AdornmentColor="Color.Secondary">
                        @foreach (User item in Enum.GetValues(typeof(User)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField Label="Quyền" HelperText="Max. 8 characters"
                                  @bind-Value="chucvu.RoleDesc" For="@(() => chucvu.RoleDesc)"/>
                    <MudTextField Label="Chức Vụ" HelperText="Max. 8 characters"
                                  @bind-Value="chucvu.TenChucVu" For="@(() => chucvu.TenChucVu)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@action</MudButton>
                    <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Cancel</MudButton>
                </MudCardActions>
                <MudText Color="Color.Error">@Messerror</MudText>
            </MudCard> 
        </MudItem>
    </MudPaper>
</EditForm>
</MudPaper>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public BLChucVu chucvu { get; set; } = new BLChucVu();
    [Parameter] public int Id { get; set; }
    private User enumValue { get; set; } = User.SinhVien;
    void Cancel() => MudDialog.Cancel();
    private string Messerror = string.Empty;
    private string action = string.Empty;
    public enum User { GiaoVien,SinhVien }
    private async void OnValidSubmit(EditContext context)
    {
        if(Id == 0)
        {
            chucvu.MaRole = enumValue.ToString();
            await ChucVuService.Create(chucvu);
            if (ChucVuService.CheckError == true)
            {
                Messerror = ChucVuService.Messerror;
            }
            else
            {
                StateHasChanged();
                Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                Snackbar.Configuration.MaxDisplayedSnackbars = 10;
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
                Snackbar.Add($"Đã Thêm thành công ", Severity.Success);
                MudDialog.Close(DialogResult.Ok(chucvu.Id));
            }
        }
        else
        {
            await ChucVuService.Update(chucvu);
            if(ChucVuService.CheckError == true)
            {
                Messerror = ChucVuService.Messerror;
            }
            else
            {
                StateHasChanged();
                Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
                Snackbar.Add($"Đã Sửa thành công ", Severity.Success);
                MudDialog.Close(DialogResult.Ok(chucvu.Id));
            }
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            action = "Create Chức Vụ";
            chucvu = new BLChucVu();
        }
        else
        {
            action ="Update Chức Vụ";
            var request = await ChucVuService.GetId((int)Id);
            if(request!=null){
                BLChucVu checkchucvu = request;
                if(checkchucvu!=null)
                {
                    chucvu = checkchucvu;
                }
            }
        }
    }
}